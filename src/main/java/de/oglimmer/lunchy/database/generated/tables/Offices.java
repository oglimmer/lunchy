/**
 * This class is generated by jOOQ
 */
package de.oglimmer.lunchy.database.generated.tables;


import de.oglimmer.lunchy.database.generated.Keys;
import de.oglimmer.lunchy.database.generated.OliLunchy;
import de.oglimmer.lunchy.database.generated.tables.records.OfficesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offices extends TableImpl<OfficesRecord> {

	private static final long serialVersionUID = 916743108;

	/**
	 * The reference instance of <code>oli_lunchy.offices</code>
	 */
	public static final Offices OFFICES = new Offices();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<OfficesRecord> getRecordType() {
		return OfficesRecord.class;
	}

	/**
	 * The column <code>oli_lunchy.offices.id</code>.
	 */
	public final TableField<OfficesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>oli_lunchy.offices.name</code>.
	 */
	public final TableField<OfficesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>oli_lunchy.offices.geo_Lat</code>.
	 */
	public final TableField<OfficesRecord, Double> GEO_LAT = createField("geo_Lat", org.jooq.impl.SQLDataType.DOUBLE, this, "");

	/**
	 * The column <code>oli_lunchy.offices.geo_Lng</code>.
	 */
	public final TableField<OfficesRecord, Double> GEO_LNG = createField("geo_Lng", org.jooq.impl.SQLDataType.DOUBLE, this, "");

	/**
	 * The column <code>oli_lunchy.offices.zoomfactor</code>.
	 */
	public final TableField<OfficesRecord, Integer> ZOOMFACTOR = createField("zoomfactor", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>oli_lunchy.offices.fk_Community</code>.
	 */
	public final TableField<OfficesRecord, Integer> FK_COMMUNITY = createField("fk_Community", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>oli_lunchy.offices.country</code>.
	 */
	public final TableField<OfficesRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * Create a <code>oli_lunchy.offices</code> table reference
	 */
	public Offices() {
		this("offices", null);
	}

	/**
	 * Create an aliased <code>oli_lunchy.offices</code> table reference
	 */
	public Offices(String alias) {
		this(alias, OFFICES);
	}

	private Offices(String alias, Table<OfficesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Offices(String alias, Table<OfficesRecord> aliased, Field<?>[] parameters) {
		super(alias, OliLunchy.OLI_LUNCHY, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<OfficesRecord, Integer> getIdentity() {
		return Keys.IDENTITY_OFFICES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<OfficesRecord> getPrimaryKey() {
		return Keys.KEY_OFFICES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<OfficesRecord>> getKeys() {
		return Arrays.<UniqueKey<OfficesRecord>>asList(Keys.KEY_OFFICES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<OfficesRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<OfficesRecord, ?>>asList(Keys.FK_OFF_COM);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Offices as(String alias) {
		return new Offices(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Offices rename(String name) {
		return new Offices(name, null);
	}
}
